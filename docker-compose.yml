version: '3.9'
name: shortcut-local

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      retries: 5
      interval: 30s
    restart: always

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    ports:
      - '19092:19092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INNER://kafka:9092,OUTER://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INNER:PLAINTEXT,OUTER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INNER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 20s
      retries: 5
      start_period: 10s
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 3000:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: shortcut-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - "15432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: users_app_db
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 1m
      retries: 3
      start_period: 30s
    restart: always
    volumes:
      - ./docker/postgresql/data:/var/lib/postgresql/data

  gateway:
    image: nginx:latest
    container_name: gateway
    ports:
      - "8000:80"
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    restart: always

  users-app:
    image: "shortcut/users:0.0.4-SNAPSHOT"
    command:
      - "--spring.datasource.url=jdbc:postgresql://postgres:5432/users_app_db"
      - "--spring.datasource.username=user"
      - "--spring.datasource.password=pass"
      - "--spring.kafka.bootstrap-servers=kafka:9092"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 850M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  redis:
    image: redis:7.4.2
    container_name: redis
    ports:
      - "16379:6379"
    volumes:
      - ./docker/redis/data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  mail-sender:
    image: "shortcut/mail-sender:0.0.4-SNAPSHOT"
    command:
      - "--spring.kafka.bootstrap-servers=kafka:9092"
      - "--spring.data.redis.host=redis"
      - "--spring.data.redis.port=6379"
    restart: on-failure
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 650M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
